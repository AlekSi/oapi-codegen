// Package complex provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package complex

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GetNestedObjects200 defines model for /nested-objects.
type GetNestedObjects200 struct {
	Child *struct {
		IsRequired bool           `json:"is_required"`
		Names      *[]interface{} `json:"names,omitempty"`
	} `json:"child,omitempty"`
	Id *int64 `json:"id,omitempty"`
}

// GetWithDefaultdefault defines model for /with-default.
type GetWithDefaultdefault struct {
	Id *string `json:"id,omitempty"`
}

// GetWithMultipleMethods200 defines model for /with-multiple-methods.
type GetWithMultipleMethods200 struct {
	Version *string `json:"version,omitempty"`
}

// PutWithMultipleMethods200 defines model for /with-multiple-methods.
type PutWithMultipleMethods200 struct {
	Version *string `json:"version,omitempty"`
}

// GetWithMultipleStatuses202JSON defines model for /with-multiple-statuses.
type GetWithMultipleStatuses202JSON struct {
	Location *string `json:"location,omitempty"`
}

// GetWithMultipleStatuses202Textplain defines model for /with-multiple-statuses.
type GetWithMultipleStatuses202Textplain = string

// GetWithMultipleStatuses404 defines model for /with-multiple-statuses.
type GetWithMultipleStatuses404 struct {
	Error *string `json:"error,omitempty"`
}

// GetWithOperationId200 defines model for /with-operation-id.
type GetWithOperationId200 struct {
	Id    *int64         `json:"id,omitempty"`
	Names *[]interface{} `json:"names,omitempty"`
}

// GetWithoutOperationId200 defines model for /without-operation-id.
type GetWithoutOperationId200 struct {
	Id    *int64         `json:"id,omitempty"`
	Names *[]interface{} `json:"names,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetNestedObjects request
	GetNestedObjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPost request with any body
	PostPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithDefault request
	GetWithDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithMultipleMethods request
	GetWithMultipleMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWithMultipleMethods request
	PutWithMultipleMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithMultipleStatuses request
	GetWithMultipleStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithOperationId request
	GetWithOperationId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithoutOperationId request
	GetWithoutOperationId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetNestedObjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNestedObjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithDefaultRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithMultipleMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithMultipleMethodsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWithMultipleMethods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWithMultipleMethodsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithMultipleStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithMultipleStatusesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithOperationId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithOperationIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithoutOperationId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithoutOperationIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetNestedObjectsRequest generates requests for GetNestedObjects
func NewGetNestedObjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nested-objects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPostRequestWithBody generates requests for PostPost with any type of body
func NewPostPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWithDefaultRequest generates requests for GetWithDefault
func NewGetWithDefaultRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/with-default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithMultipleMethodsRequest generates requests for GetWithMultipleMethods
func NewGetWithMultipleMethodsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/with-multiple-methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWithMultipleMethodsRequest generates requests for PutWithMultipleMethods
func NewPutWithMultipleMethodsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/with-multiple-methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithMultipleStatusesRequest generates requests for GetWithMultipleStatuses
func NewGetWithMultipleStatusesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/with-multiple-statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithOperationIdRequest generates requests for GetWithOperationId
func NewGetWithOperationIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/with-operation-id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithoutOperationIdRequest generates requests for GetWithoutOperationId
func NewGetWithoutOperationIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/without-operation-id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetNestedObjects request
	GetNestedObjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNestedObjectsResponse, error)

	// PostPost request with any body
	PostPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostResponse, error)

	// GetWithDefault request
	GetWithDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithDefaultResponse, error)

	// GetWithMultipleMethods request
	GetWithMultipleMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithMultipleMethodsResponse, error)

	// PutWithMultipleMethods request
	PutWithMultipleMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutWithMultipleMethodsResponse, error)

	// GetWithMultipleStatuses request
	GetWithMultipleStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithMultipleStatusesResponse, error)

	// GetWithOperationId request
	GetWithOperationIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithOperationIdResponse, error)

	// GetWithoutOperationId request
	GetWithoutOperationIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithoutOperationIdResponse, error)
}

type GetNestedObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Child *struct {
			IsRequired bool           `json:"is_required"`
			Names      *[]interface{} `json:"names,omitempty"`
		} `json:"child,omitempty"`
		Id *int64 `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNestedObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNestedObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Id *string `json:"id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWithDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithMultipleMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Version *string `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWithMultipleMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithMultipleMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWithMultipleMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Version *string `json:"version,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutWithMultipleMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWithMultipleMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithMultipleStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Location *string `json:"location,omitempty"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWithMultipleStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithMultipleStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithOperationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    *int64         `json:"id,omitempty"`
		Names *[]interface{} `json:"names,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWithOperationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithOperationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithoutOperationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    *int64         `json:"id,omitempty"`
		Names *[]interface{} `json:"names,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWithoutOperationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithoutOperationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetNestedObjectsWithResponse request returning *GetNestedObjectsResponse
func (c *ClientWithResponses) GetNestedObjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNestedObjectsResponse, error) {
	rsp, err := c.GetNestedObjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNestedObjectsResponse(rsp)
}

// PostPostWithBodyWithResponse request with arbitrary body returning *PostPostResponse
func (c *ClientWithResponses) PostPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostResponse, error) {
	rsp, err := c.PostPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPostResponse(rsp)
}

// GetWithDefaultWithResponse request returning *GetWithDefaultResponse
func (c *ClientWithResponses) GetWithDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithDefaultResponse, error) {
	rsp, err := c.GetWithDefault(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithDefaultResponse(rsp)
}

// GetWithMultipleMethodsWithResponse request returning *GetWithMultipleMethodsResponse
func (c *ClientWithResponses) GetWithMultipleMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithMultipleMethodsResponse, error) {
	rsp, err := c.GetWithMultipleMethods(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithMultipleMethodsResponse(rsp)
}

// PutWithMultipleMethodsWithResponse request returning *PutWithMultipleMethodsResponse
func (c *ClientWithResponses) PutWithMultipleMethodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutWithMultipleMethodsResponse, error) {
	rsp, err := c.PutWithMultipleMethods(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWithMultipleMethodsResponse(rsp)
}

// GetWithMultipleStatusesWithResponse request returning *GetWithMultipleStatusesResponse
func (c *ClientWithResponses) GetWithMultipleStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithMultipleStatusesResponse, error) {
	rsp, err := c.GetWithMultipleStatuses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithMultipleStatusesResponse(rsp)
}

// GetWithOperationIdWithResponse request returning *GetWithOperationIdResponse
func (c *ClientWithResponses) GetWithOperationIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithOperationIdResponse, error) {
	rsp, err := c.GetWithOperationId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithOperationIdResponse(rsp)
}

// GetWithoutOperationIdWithResponse request returning *GetWithoutOperationIdResponse
func (c *ClientWithResponses) GetWithoutOperationIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWithoutOperationIdResponse, error) {
	rsp, err := c.GetWithoutOperationId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithoutOperationIdResponse(rsp)
}

// ParseGetNestedObjectsResponse parses an HTTP response from a GetNestedObjectsWithResponse call
func ParseGetNestedObjectsResponse(rsp *http.Response) (*GetNestedObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNestedObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Child *struct {
				IsRequired bool           `json:"is_required"`
				Names      *[]interface{} `json:"names,omitempty"`
			} `json:"child,omitempty"`
			Id *int64 `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPostResponse parses an HTTP response from a PostPostWithResponse call
func ParsePostPostResponse(rsp *http.Response) (*PostPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWithDefaultResponse parses an HTTP response from a GetWithDefaultWithResponse call
func ParseGetWithDefaultResponse(rsp *http.Response) (*GetWithDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Id *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWithMultipleMethodsResponse parses an HTTP response from a GetWithMultipleMethodsWithResponse call
func ParseGetWithMultipleMethodsResponse(rsp *http.Response) (*GetWithMultipleMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithMultipleMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutWithMultipleMethodsResponse parses an HTTP response from a PutWithMultipleMethodsWithResponse call
func ParsePutWithMultipleMethodsResponse(rsp *http.Response) (*PutWithMultipleMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWithMultipleMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWithMultipleStatusesResponse parses an HTTP response from a GetWithMultipleStatusesWithResponse call
func ParseGetWithMultipleStatusesResponse(rsp *http.Response) (*GetWithMultipleStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithMultipleStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Location *string `json:"location,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 202:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetWithOperationIdResponse parses an HTTP response from a GetWithOperationIdWithResponse call
func ParseGetWithOperationIdResponse(rsp *http.Response) (*GetWithOperationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithOperationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    *int64         `json:"id,omitempty"`
			Names *[]interface{} `json:"names,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWithoutOperationIdResponse parses an HTTP response from a GetWithoutOperationIdWithResponse call
func ParseGetWithoutOperationIdResponse(rsp *http.Response) (*GetWithoutOperationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithoutOperationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    *int64         `json:"id,omitempty"`
			Names *[]interface{} `json:"names,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
